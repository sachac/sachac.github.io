#+TITLE: Evil plans
#+HTML: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
#+STARTUP: lognotedone
#+FILETAGS: :evilplans:
#+HTML: <div class="row"><div class="columns">

<<top>>


#+HTML: <div class="heading-status" width="200" height="200" style="float: right; width: 220px; background: white; padding: 10px" data-type="sunburst"></div>

Curious about anything? Contact me at sacha@sachachua.com .  
Web: https://sachachua.com/evil-plans
Raw files: [[https://github.com/sachac/sachac.github.io/tree/master/evil-plans][evil-plans]]

Additional notes: http://sachachua.com/blog/2014/03/reflecting-goals-time/

* Current goals
  :PROPERTIES:
  :CUSTOM_ID: Current_goals
  :END:

See raw file or end of document for code. 

#+CALL: graph-from-tables[](fillcolumn=20,id="G",outputfile="goals.svg",cmdline="-Kdot -Tsvg -Gdpi=72 -Gsize=8,8 -Grankdir=LR") :results silent :exports none

[[file:goals.svg]]

* Including "Someday" goals
  :PROPERTIES:
  :CUSTOM_ID: Including__Someday__goals
  :END:

See raw file or end of document for code.

#+CALL: graph-from-tables[](fillcolumn=20,include-someday=1,outputfile="someday.svg",cmdline="-Kdot -Tsvg -Gdpi=72 -Gsize=10,10 -Grankdir=LR") :results silent :exports none

[[file:someday.svg]]

* Goals                                                                :goal:
:PROPERTIES:
:LOGGING:  TODO(@)
:CUSTOM_ID: Goals
:END:

** tickle my brain and live an awesome life
   :PROPERTIES:
   :CUSTOM_ID: tickle_my_brain_and_live_an_awesome_life
   :END:

** TODO fill in at least one observation for each specific expectation in the Ontario Kindergarten Program
   DEADLINE: <2021-06-30 Wed>
   :PROPERTIES:
   :CUSTOM_ID: fill_in_at_least_one_observation_for_each_specific_expectation_in_the_Ontario_Kindergarten_Program
   :END:
so that I can [[tickle my brain and live an awesome life]]
https://www.ontario.ca/document/kindergarten-program-2016/appendix-overall-expectations-related-specific-expectations
** SOMEDAY move my services into Docker or similar containers
   :PROPERTIES:
   :CUSTOM_ID: move_my_services_into_Docker_or_similar_containers
   :END:
So that I can [[tickle my brain and live an awesome life]]
(and make my setup easier to reproduce)
** help the Emacs community grow
   :PROPERTIES:
   :CUSTOM_ID: help_the_Emacs_community_grow
   :END:
so that I can [[tickle my brain and live an awesome life]] 
*** TODO edit the rest of the subtitles for EmacsConf
    :PROPERTIES:
    :CUSTOM_ID: edit_the_rest_of_the_subtitles_for_EmacsConf
    :END:
so that I can [[help the Emacs community grow]] and make things more searchable

[[file:~/orgzly/organizer.org::*Edit another subtitle file][Edit another subtitle file]]
*** SOMEDAY figure out a workflow for pointing to Emacs meetups
    :PROPERTIES:
    :CUSTOM_ID: figure_out_a_workflow_for_pointing_to_Emacs_meetups
    :END:
so that I can help people connect and [[help the Emacs community grow]]
*** SOMEDAY make quick screencasts and animated GIFs
    :PROPERTIES:
    :CUSTOM_ID: make_quick_screencasts_and_animated_GIFs
    :END:
so that I can [[help the Emacs community grow]]
*** SOMEDAY figure out signposts and maps
    :PROPERTIES:
    :CUSTOM_ID: figure_out_signposts_and_maps
    :END:
so that I can [[help the Emacs community grow]]
** TODO set up my new laptop
   :PROPERTIES:
   :CUSTOM_ID: set_up_my_new_laptop
   :END:
   so that I can [[tickle my brain and live an awesome life]]
[[file:~/orgzly/organizer.org::*Set up new laptop][Set up new laptop]]
*** TODO figure out new drawing workflow
    :PROPERTIES:
    :CUSTOM_ID: figure_out_new_drawing_workflow
    :END:
    so that I can [[set up my new laptop]]

[[file:~/orgzly/organizer.org::*figure out new drawing workflow][figure out new drawing workflow]]
* Old graph
  :PROPERTIES:
  :CUSTOM_ID: Old_graph
  :END:
#+begin_src dot :file goals.png :cmdline -Kdot -Tpng :results silent
  digraph G {
    ratio=expand
    node [shape=box]
    "Explore\nEmacs" -> "Learn tools" -> "Tickle my brain" -> "Write blog posts" -> "Share useful stuff" -> "Build good karma" -> "Learn from others"
    "Automate" -> "Learn tools"
    "Explore AutoHotkey" -> "Automate"
    "Read iMacros capabilities" -> "Automate"
    "Set up Selenium for Java" -> "Automate"
    "Share useful stuff" -> "Make technical topics friendlier" -> "Help the Emacs community be even awesomer" -> "Tickle my brain"
    "Make Emacs beginner resources" -> "Share useful stuff"
    "Read" -> "Tickle my brain"
    "Draw" -> "Share useful stuff"
    "Draw" -> "Think more clearly"
    "Write blog posts" -> "Think more clearly"
    "Delegate" -> "Share opportunities"
    "Delegate" -> "Expand capabilities"
    "Tickle my brain" -> "Expand capabilities"
    "Do consulting" -> "Tickle my brain"
    "Package" -> "Share useful stuff"
    "Respond" -> "Learn from others"
    "Respond" -> "Build good karma"
    "Build good karma" -> "Have a good foundation"
    "Get better at Javascript\n(NodeJS, JQuery)" -> "Learn tools"
    "Get better at\nRuby, Rails" -> "Learn tools"
    "Delegate" -> "Build process library" -> "Share useful stuff"
    "Delegate" -> "Learn from others"
    "Learn from others" -> "Make good decisions" -> "Enjoy life"
    "Think more clearly" -> "Make good decisions" -> "Shift my habits"
    "Understand my life" -> "Think more clearly"
    "Ask, experiment, measure" -> "Make good decisions"
    "Sketchnote presentations" -> "Share useful stuff"
    "Sketchnote presentations" -> "Keep good ideas from disappearing"
  }
#+end_src

#+ATTR_HTML: :width 640
[[http://sachachua.com/sharing/goals.png][file:goals.png]]

* Code
  :PROPERTIES:
  :CUSTOM_ID: Code
  :END:

Need to have graphviz installed.

#+name: list-files-with-target
#+begin_src emacs-lisp :var directory="" :var pattern="How to" :var target=50 :var strip="\\.gdoc$" :eval no
  (let ((count 0)
        (files
         (directory-files directory nil pattern)))
    (format "%d items - %d%%\n%s"
            (length files)
            (/ (* 100.0 (length files)) target)
            (mapconcat
             (lambda (x)
               (setq count (1+ count))
               (format "%d. %s" count (replace-regexp-in-string strip "" x)))
             files
             "\n")))
#+end_src

#+name: graph-from-tables
#+BEGIN_SRC emacs-lisp :var fill-column=20 :var tag="goal" :var id="G"
  (defvar include-someday nil)
  (defun sacha/fill-string (string new-fill-column &optional replace-char)
    "Wrap STRING to NEW-FILL-COLUMN. Change newlines to REPLACE-CHAR."
    (with-temp-buffer
      (insert string)
      (let ((fill-column new-fill-column))
        (fill-region (point-min) (point-max))
        (if replace-char
            (progn
              (goto-char (point-min))
              (while (re-search-forward "\n" nil t)
                (replace-match replace-char t t))))
        (buffer-string))))

  (defun sacha/org-map-goals (tag)
    "Return an alist, based on the TAG tree and \"so that I can\" link structure.
    Structure: ((nodes . ((components) ...)) (edges . ((a . b) ...)))"
    (let (nodes edges)
      ;; Go through the entries
      (org-map-entries
       (lambda ()
         (let ((heading (org-heading-components)))
           (when (or (not (elt heading 2)) (member (elt heading 2) (if include-someday '("TODO" "WAITING" "SOMEDAY") '("TODO"))))
             (save-excursion
               (save-restriction
                 ;; Ignore subtrees in the body
                 (org-narrow-to-subtree)
                 (save-excursion
                   (org-set-property "CUSTOM_ID" (replace-regexp-in-string "[^A-Za-z0-9]" "_" (elt heading 4))))
                 (end-of-line)
                 (narrow-to-region
                  (point-min)
                  (if (re-search-forward
                       (concat "[\r\n]\\(" org-outline-regexp "\\)") nil t)
                      (match-beginning 1)
                    (point-max)))
                 (goto-char (point-min))
                 (when (> (car heading) 1)
                   (setq nodes (cons heading nodes)))
                 (when (re-search-forward "so that I can" nil t)
                   (while (re-search-forward org-bracket-link-regexp (line-end-position) t)
                     (setq edges (cons (cons (elt heading 4) (match-string-no-properties 1)) edges)))))))))
       tag)
      (list (cons 'nodes nodes) (cons 'edges edges))))

  (defvar sacha/elgraphviz-attributes '((:color . "color")
                                        (:fontname . "fontname")
                                        (:pad . "pad")
                                        (:shape . "shape")
                                        (:style . "style")
                                        (:tooltip . "tooltip")
                                        (:target . "target")
                                        (:url . "URL")
                                        (:width . "width"))
    "List of attributes")


  (defun sacha/elgraphviz-process-property-list (prop-list)
    "Convert PROP-LIST to an alphabetically sorted, comma-separated attribute list."
    (mapconcat 'identity
               (delq nil
                     (mapcar (lambda (x)
                               (if (plist-get prop-list (car x))
                                   (format "%s=\"%s\"" (cdr x)
                                           (sacha/elgraphviz-quote-string (plist-get prop-list (car x))))))
                             sacha/elgraphviz-attributes))
               ","))

  (ert-deftest sacha/elgraphviz-process-property-list ()
    (should (string= (sacha/elgraphviz-process-property-list '(:width 1)) "width=\"1\"")))

  (defun sacha/elgraphviz-quote-string (string) "Quote \" in strings." (replace-regexp-in-string "\"" "\\\"" (format "%s" string)))

  (defun sacha/elgraphviz-node (name &rest args)
    "Return the node definition for NAME with ARGS as attributes."
    (if args
        (format "\"%s\" [%s]" (sacha/elgraphviz-quote-string name) (sacha/elgraphviz-process-property-list args))
      (format "\"%s\"" (sacha/elgraphviz-quote-string name))))
  (defun sacha/elgraphviz-directed-edge (a b &rest args)
    "Return the node definition for NAME with ARGS as attributes."
    (format "\"%s\" -> \"%s\" [%s]"
            (sacha/elgraphviz-quote-string a)
            (sacha/elgraphviz-quote-string b)
            (sacha/elgraphviz-process-property-list args)))

  (ert-deftest sacha/elgraphviz-node ()
    (should (string= (sacha/elgraphviz-node "Test" :style "filled" :url "http://example.com" :tooltip "test")
                     "\"Test\" [style=\"filled\",tooltip=\"test\",URL=\"http://example.com\"]")))

  (defun sacha/elgraphviz-default-node (&rest attributes)
    (format "node [%s]" (sacha/elgraphviz-process-property-list attributes)))

  (ert-deftest sacha/elgraphviz-default-node ()
    (should (string= (sacha/elgraphviz-default-node :color "#cccccc" :width 100)
                     "node [color=\"#cccccc\",width=\"100\"]")))

  (defun sacha/elgraphviz-default-edge (&rest attributes)
    (format "edge [%s]" (sacha/elgraphviz-process-property-list attributes)))
  (defun sacha/elgraphviz-attribute (name val)
    (format "%s=\"%s\"" name (sacha/elgraphviz-quote-string val)))

  (defun sacha/elgraphviz-digraph (id &rest body)
    (concat "digraph " id " {\n"
            (mapconcat 'identity body "\n")
            "}"))

  (defun sacha/org-map-to-graphviz (map fill-column id)
    "Convert MAP to a graphviz representation. Wrap titles at FILL-COLUMN."
    (sacha/elgraphviz-digraph id
                              (sacha/elgraphviz-attribute "id" id) 
                              (sacha/elgraphviz-default-node :shape "box" :fontname "Open Sans" :pad 1) 
                              (sacha/elgraphviz-default-edge :color "#CCCCCC") 
                              (mapconcat
                               (lambda (x)
                                 (sacha/elgraphviz-directed-edge 
                                  (sacha/fill-string (car x) fill-column "\\n")
                                  (sacha/fill-string (cdr x) fill-column "\\n")))
                               (cdr (assoc 'edges map)) "\n")
                              (mapconcat
                               (lambda (x)
                                 (sacha/elgraphviz-node
                                  (sacha/fill-string (elt x 4) fill-column "\\n")
                                  :style (if (null (elt x 2)) "filled")
                                  :url (concat "index.html#" (replace-regexp-in-string "[^A-Za-z0-9]" "_" (elt x 4)))
                                  :target "_parent"
                                  :tooltip (elt x 4)))
                               (cdr (assoc 'nodes map)) "\n")))
  (org-babel-execute:dot (sacha/org-map-to-graphviz (sacha/org-map-goals tag) fill-column id) (list (cons :file outputfile) (cons :cmdline cmdline)))
#+END_SRC

#+begin_EXPORT html
<style type="text/css">
.back-to-top {
    position: fixed;
    bottom: 2em;
    right: 0px;
    text-decoration: none;
    color: #000000;
    background-color: rgba(235, 235, 235, 0.80);
    font-size: 12px;
    padding: 1em;
    display: none;
}

.back-to-top:hover {
    background-color: rgba(135, 135, 135, 0.50);
}
</style>

<a class="back-to-top" href="#top">Back to top</a>

<script type="text/javascript">
    var offset = 220;
    var duration = 500;
    $(window).scroll(function() {
        if (jQuery(this).scrollTop() > offset) {
            jQuery('.back-to-top').fadeIn(duration);
        } else {
            jQuery('.back-to-top').fadeOut(duration);
        }
    });
</script>
#+end_EXPORT

#+begin_EXPORT html
</div></div><!-- columns, row-->
#+end_EXPORT

#+BEGIN_EXPORT html
  <style type="text/css">
  .Green { fill: green; color: white; background: green}
  .Yellow { fill: yellow; background: yellow }
  .Red { fill: red; color: white; background: red }
  svg .heading { cursor: pointer; stroke: 2px white; }
  path.heading.todo { fill: green }
  path.heading.someday { fill: gray }
  </style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script>
<script type="text/javascript">
// Returns a hierarchical JSON of the tree structure
function buildHeadingTree() {
  var lastNode = {level: 0, children: []};
  var root = lastNode;
  var headings = $(':header');
  for (var i = 0; i < headings.length; i++) {
    var matches = headings[i].tagName.match(/[0-9]+/);
    var level = +(matches[0]);
    while (level <= lastNode.level && lastNode.parent) {
      lastNode = lastNode.parent;
    }
    var newNode = {parent: lastNode,
                   children: [],
                   level: level,
                   element: headings[i]};
    lastNode.children.push(newNode);
    lastNode = newNode;
  }
  return root;
}

function classValue(d) {
  var m = d.element.innerHTML.match(/TODO|SOMEDAY|DONE/i);
  return ((m && m[0]) || 'TODO') + ' heading';
//  return d.element.innerHTML.match(/Green|Yellow|Red/i)[0];
}
function labelValue(d) {
  return '<a href="#' + d.element.id + '">' + d.element.innerHTML + '</a>';
}

// Code from https://bl.ocks.org/mbostock/1005873
// Draws the chart of status
function drawHeadingStatusChart(output, data) {
  var width = output.attr('width'),
      height = output.attr('height'),
      partition = d3.layout.partition()
        .value(function(d) { return 1; }),
      svg = output.append('svg').attr('width', width).attr('height', height),
      breadcrumbs = output.append('div').attr('class', 'heading-breadcrumbs'),
      clickHandler = function(d) { window.location.hash = '#' + d.element.id; },
      showBreadcrumbs = function(d) {
      var links = [labelValue(d)];
      while (d.parent) {
        d = d.parent;
        if (d.element) {
        links.unshift(labelValue(d));
        }
      }
      breadcrumbs.html(links.join(' &lt; '));
  };
  if (output.attr('data-type') == 'sunburst') {
    var radius = Math.min(width, height) / 2;
    svg = svg.append('g').attr('transform', 'translate(' + (width / 2) + ',' + (height / 2) + ')');
    var x = d3.scale.linear().range([0, 2 * Math.PI]),
        y = d3.scale.sqrt().range([0, radius]),
        arc = d3.svg.arc()
    .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
    .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
    .innerRadius(function(d) { return Math.max(0, y(d.y)); })
    .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); }),
    path = svg.selectAll('path').data(partition(data))
                  .enter().append('path').attr('d', arc)
                  .attr('class', classValue)
                  .on('click', clickHandler)
                  .on('mouseover', showBreadcrumbs);
  } else {
    var x = d3.scale.linear().range([0, width]),
        y = d3.scale.linear().range([0, height]),
        rect = svg.selectAll('rect');
        rect.data(partition(data))  
          .enter()
          .append('rect')
          .attr('x', function(d) { return x(d.x); })
          .attr('y', function(d) { return y(d.y); })
          .attr('width', function(d) { return x(d.dx); })
          .attr('height', function(d) { return y(d.dy); })
          .attr('class', classValue)
          .on('mouseover', showBreadcrumbs)
          .on('click', clickHandler);
  }
}

function addClassToHeadings() {
  var headings = $(':header');
  for (var i = 0; i < headings.length; i++) {
    $(headings[i]).addClass(classValue({element: headings[i]}));
  }
}

$(document).ready(function() {
  drawHeadingStatusChart(d3.select('.heading-status'),  
   buildHeadingTree().children[0]);
  addClassToHeadings();
});
</script>
#+END_EXPORT
* Old table  :noexport:
  :PROPERTIES:
  :CUSTOM_ID: Table
  :END:

     #+BEGIN: propview :cols (GOALCATEGORY XP TODO ITEM)  :conds ((> XP 0) (not (string= TODO "DONE"))) :id global :noquote t :skip-empty-rows t 
     | GOALCATEGORY | XP | TODO | ITEM |
     |--------------+----+------+------|
     |--------------+----+------+------|
     |              |    |      |      |
     #+END:

